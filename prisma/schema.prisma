datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model user {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    DateTime?
  emailVerified Boolean?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?
  account       account[]
  session       session[]

  @@schema("auth")
}

model session {
  id             String   @id @default(cuid())
  userId         String
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  user           user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@schema("auth")
}

model verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@schema("auth")
}

model Todo {
  id        String   @id @default(cuid())
  userId    String
  text      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
  @@index([userId])
}

model Tamagotchi {
  id            String   @id @default(cuid())
  userId        String   @unique
  hunger        Int      @default(50)
  happiness     Int      @default(100)
  wasteCount    Int      @default(0)
  lastFedAt     DateTime @default(now())
  lastCleanedAt DateTime @default(now())
  lastCheckedAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("public")
}
